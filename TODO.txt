VM
--------
Document every file in the vm folder
Document the VM

Optimize print, read for atoms and arrays
Ompitmize printing strings with spaces
Dynamic memory allocation via set command



Compiler
--------
0. Documentation and Cleanup
1. Implement Semantic Analysis
   1.1 Expression Translation and Three-Adress Code
   1.2 Type Checking 
2. Intermediate and final Code Generation


compile_do(doblock, level):
	guards = doblock.guards

	write(buffer, level + 'do:\n')
	write(buffer, level + '\tgss ')

	guardnames = {}

	for guard in guards:
		ugname = ugn(guard, env)	;; Unused gaurd name
		guardnames[guard] = ugname
		write(buffer, ugname + ' ')

	write(buffer, '\n')
	write(buffer, level + '\tclc:\n')

	for guard in guards:
		compile(guard, level)

	for guard in guards:
		write(buffer, level + '\tact' + guardnames[guard] + ':\n')

		body = guard.body

		compile(body, level + 1)

EXPLORE:
	compiler security (Ken thmpson)
	security by I/O pocedures
	Garbage collection



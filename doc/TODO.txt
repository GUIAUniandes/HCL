VM
--------
Document every file in the vm folder
Document the VM

Optimize print, read for atoms and arrays
Ompitmize printing strings with spaces
Dynamic memory allocation via set command

Milestones
-----------
0. Definition of low level assembly language
1. First version of a functional VM


Compiler
--------
0. Documentation and Cleanup 
1. Final Code Generation
   1.1 Unoptimized code generation
   1.2 Optimization (TBD)
       1.2.1 Loop unrolling
       1.2.2 Repeated expressions
       1.2.3 Expression order evaluation

Milestones
-----------
1 Definition of the Language in terms of a LL(1) Grammar
2. Generic algorithms for LL(1) grammar manipulation
   2.1 Abstract Syntax Tree definition and simplification
   2.2 Expression detection and transformation into a binary tree representation
3. Semantic Analysis
   3.1 Inference rules for expression correction and verification introduced
   3.2 Symbol table definition (Intermediate representation)
   3.3 Scope and type checking of expressions and variables
   3.4 Generation and emission of symbol tables

compile_do(doblock, level):
	guards = doblock.guards

	write(buffer, level + 'do:\n')
	write(buffer, level + '\tgss ')

	guardnames = {}

	for guard in guards:
		ugname = ugn(guard, env)	;; Unused gaurd name
		guardnames[guard] = ugname
		write(buffer, ugname + ' ')

	write(buffer, '\n')
	write(buffer, level + '\tclc:\n')

	for guard in guards:
		compile(guard, level)

	for guard in guards:
		write(buffer, level + '\tact' + guardnames[guard] + ':\n')

		body = guard.body

		compile(body, level + 1)

EXPLORE:
	Compiler security (Ken thompson Turing award lecture)
	Security by I/O pocedures (gets (unbound I/O), Morris worm)
	Garbage collection (freeing unused variables in a program)

COMPILED CODE FACTORIZATION

if sum = s -> s11; s12; ..; s1n
[] sum > s -> s21; s22; ..; s2n
[] sum < s -> s31; s32; ..; s3n
fi

Let eqvsij, be que insturctions compiled for the statement sij.

The code above, should compile without optimizations to something similar to:

if:
	gss g1 g2 g3

	cmp sum s
	equ:
		mov g1 000001

	cmp sum s
	sgt:
		mov g2 000001

	cmp sum s
	slt:
		mov g3 000001

	act g1:
		eqvs11
		...
		eqvs1n

	...

An optmized version could be:

if:
	gss g1 g2 g3

	cmp sum s
	equ:
		mov g1 000001

	sgt:
		mov g2 000001

	slt:
		mov g3 000001

	act g1:
		eqvs11
		...
		eqvs1n

	...






alpha := 'a' | 'b' | 'c' | ... | 'z' | 'A' | 'B' | ... | 'Z';
digit := '0' | '1' | ... | '9';
number = digit, { digit };
bit := '0' | '1';
binary := bit, { bit };
variable := alpha, { alpha }[ number ];
type := 'integer' | 'char' | 'boolean';
structure := type, '#', number, [ '#', number ];
array := variable, '[', variable, ']' | variable, '[', number, ']';
matrix := array, '[', variable, ']' | array, '[', number, ']';
set := 'set', ' ', variable, ' ', ( type | structure ), '\n';
mov := 'mov', ' ', ( variable | array | matrix ), ' ', ( binary | variable | array | matrix ), '\n';
and := 'and', ' ', ( variable | array | matrix ), ' ', ( binary | variable | array | matrix ), '\n';
not := 'not', ' ', ( variable | array | matrix ), ' ', ( binary | variable | array | matrix ), '\n';
xor := 'xor', ' ', ( variable | array | matrix ), '\n';
or := 'or', ' ', ( variable | array | matrix ), ' ', ( binary | variable | array | matrix ), '\n';
add := 'add', ' ', ( variable | array | matrix ), ' ', ( binary | variable | array | matrix ), '\n';
sub := 'sub', ' ', ( variable | array | matrix ), ' ', ( binary | variable | array | matrix ), '\n';
dec := 'dec', ' ', ( variable | array | matrix ), '\n';
inc := 'inc', ' ', ( variable | array | matrix );
mul := 'mul', ' ', ( variable | array | matrix ), ' ', ( binary | variable | array | matrix ), '\n';
div := 'div', ' ', ( variable | array | matrix ), ' ', ( binary | variable | array | matrix ), '\n';
mod := 'mod', ' ', ( variable | array | matrix ), ' ', ( binary | variable | array | matrix ), '\n';
cmp := 'cmp', ' ', ( binary | variable | array | matrix ), ' ', ( binary | variable | array | matrix ), '\n';
print := 'print', ' ', ( variable | array | matrix | binary | '"', variable, '"' ), '\n';
push := 'push', ' ', ( variable | array | matrix ), '\n';
free := 'free', ' ', variable, '\n';
call := 'call', ' ', variable, '\n';
halt := 'halt', ' ', ( variable | array | matrix );
instruction := set | mov | and | not | xor | or | add | sub | dec | inc
			   mul | div | mod | print | push | call | free | cmp;
equ := 'equ', ':', '\n', '\t', ( block | instruction ), { block | instruction };
slt := 'slt', ':', '\n', '\t', ( block | instruction ), { block | instruction };
sgt := 'sgt', ':', '\n', '\t', ( block | instruction ), { block | instruction };
leq := 'leq', ':', '\n', '\t', ( block | instruction ), { block | instruction };
geq := 'geq', ':', '\n', '\t', ( block | instruction ), { block | instruction };
neq := 'neq', ':', '\n', '\t', ( block | instruction ), { block | instruction };
gss := 'gss', ' ', variable, {" ", variable}, '\n';
comparisson := equ | slt | sgt | leq | geq | neq;
clc := 'clc', ':', '\n', '\t', ( comparisson | instruction ), { comparisson | instruction };
act := 'act', ' ', variable, ':', '\n', '\t', ( instruction | skip | block ), { instruction | skip | block };
do := 'do', ':', '\n', '\t', gss, clc, act, { act };
if := 'if', ':', '\n', '\t', gss, clc, instruction, { instruction }, act, { act };
blocks := do | if | equ | slt | sqt | leq | geq | neq;
;; mergesort.vhcl : Autogenerated file by HCL Compiler v1.0

;; Auxiliar character defintion
;; Space character
set _sysspace char
;; New Line character
set _sysnl char
;; Space character initialization
mov _sysspace 100000
;; New Line character initialization
mov _sysnl 001010

;; General variable defintion
set a0 integer#21
set newline0 char
set bound0 integer
set target0 integer
set space0 char
set i0 integer
set j0 integer
set left_start0 integer
set mid0 integer
set n0 integer
set right_end0 integer
set low0 integer
set ans0 integer
set dummy20 integer
set dummy10 integer
set upp0 integer
set curr_size0 integer
set n14 integer
set n24 integer
set right4 integer#21
set k4 integer
set left4 integer#21

;; General program execution routine

mov newline0 _sysnl
mov space0 _sysspace
readint n0
print newline0
mov low0 0
mov upp0 1010
mov .r1chr 1
not .r1chr
inc .r1chr
mov ans0 .r1chr
mov i0 0
do:
	gss _do0guard0
	clc:
		cmp i0 n0
		slt:
			mov .r5int 1
		geq:
			mov .r5int 0
		mov _do0guard0 .r5int
	act _do0guard0:
		push low0
		push upp0
		call rand
		mov .r4chr ..retint
		mov a0[i0] .r4chr
		mov .r3bol i0
		add .r3bol 1
		mov i0 .r3bol
mov i0 0
do:
	gss _do1guard0
	clc:
		cmp i0 n0
		slt:
			mov .r2int 1
		geq:
			mov .r2int 0
		mov _do1guard0 .r2int
	act _do1guard0:
		print a0[i0]
		print space0
		mov .r2int i0
		add .r2int 1
		mov i0 .r2int
print newline0
mov .r1int n0
sub .r1int 1
mov dummy10 .r1int
mov curr_size0 1
do:
	gss _do2guard0
	clc:
		mov .r1bol n0
		sub .r1bol 1
		cmp curr_size0 .r1bol
		leq:
			mov .r2bol 1
		sgt:
			mov .r2bol 0
		mov _do2guard0 .r2bol
	act _do2guard0:
		mov left_start0 0
		do:
			gss _do3guard0
			clc:
				mov .r1int n0
				sub .r1int 1
				cmp left_start0 .r1int
				slt:
					mov .r3int 1
				geq:
					mov .r3int 0
				mov _do3guard0 .r3int
			act _do3guard0:
				mov .r5bol curr_size0
				sub .r5bol 1
				add .r5bol left_start0
				mov bound0 .r5bol
				push bound0
				push dummy10
				call min
				mov .r1int ..retint
				mov mid0 .r1int
				mov .r3int 10
				mul .r3int curr_size0
				sub .r3int 1
				add .r3int left_start0
				mov dummy20 .r3int
				push dummy20
				push dummy10
				call min
				mov .r4chr ..retint
				mov right_end0 .r4chr
				mov .r1bol left_start0
				add .r1bol 1
				mov .r2bol mid0
				sub .r2bol .r1bol
				mov n14 .r2bol
				mov .r1int right_end0
				sub .r1int mid0
				mov n24 .r1int
				mov i0 0
				do:
					gss _do4guard0
					clc:
						cmp i0 n14
						slt:
							mov .r3bol 1
						geq:
							mov .r3bol 0
						mov _do4guard0 .r3bol
					act _do4guard0:
						mov .r1bol left_start0
						add .r1bol i0
						mov left4[i0] a0[.r1bol]
						mov .r5chr i0
						add .r5chr 1
						mov i0 .r5chr
				mov j0 0
				do:
					gss _do5guard0
					clc:
						cmp j0 n24
						slt:
							mov .r1chr 1
						geq:
							mov .r1chr 0
						mov _do5guard0 .r1chr
					act _do5guard0:
						mov .r2bol 1
						add .r2bol j0
						add .r2bol mid0
						mov right4[j0] a0[.r2bol]
						mov .r1bol j0
						add .r1bol 1
						mov j0 .r1bol
				mov i0 0
				mov j0 0
				mov k4 left_start0
				do:
					gss _do6guard0
					clc:
						cmp i0 n14
						slt:
							mov .r5chr 1
						geq:
							mov .r5chr 0
						cmp j0 n24
						slt:
							mov .r4int 1
						geq:
							mov .r4int 0
						and .r5chr .r4int
						mov _do6guard0 .r5chr
					act _do6guard0:
						if:
							gss _if0guard0 _if0guard1
							cmp left4[i0] right4[j0]
							leq:
								mov .r2bol 1
							sgt:
								mov .r2bol 0
							mov _if0guard0 .r2bol
							cmp left4[i0] right4[j0]
							sgt:
								mov .r5bol 1
							leq:
								mov .r5bol 0
							mov _if0guard1 .r5bol
							act _if0guard0:
								mov a0[k4] left4[i0]
								mov .r3int i0
								add .r3int 1
								mov i0 .r3int
							act _if0guard1:
								mov a0[k4] right4[j0]
								mov .r4bol j0
								add .r4bol 1
								mov j0 .r4bol
						mov .r2chr k4
						add .r2chr 1
						mov k4 .r2chr
				do:
					gss _do7guard0
					clc:
						cmp i0 n14
						slt:
							mov .r3int 1
						geq:
							mov .r3int 0
						mov _do7guard0 .r3int
					act _do7guard0:
						mov a0[k4] left4[i0]
						mov .r3chr i0
						add .r3chr 1
						mov i0 .r3chr
						mov .r3bol k4
						add .r3bol 1
						mov k4 .r3bol
				do:
					gss _do8guard0
					clc:
						cmp j0 n24
						slt:
							mov .r1bol 1
						geq:
							mov .r1bol 0
						mov _do8guard0 .r1bol
					act _do8guard0:
						mov a0[k4] right4[j0]
						mov .r5bol j0
						add .r5bol 1
						mov j0 .r5bol
						mov .r2chr k4
						add .r2chr 1
						mov k4 .r2chr
				mov .r2chr 10
				mul .r2chr curr_size0
				add .r2chr left_start0
				mov left_start0 .r2chr
		mov .r3chr 10
		mul .r3chr curr_size0
		mov curr_size0 .r3chr
mov i0 0
do:
	gss _do9guard0
	clc:
		cmp i0 n0
		slt:
			mov .r2int 1
		geq:
			mov .r2int 0
		mov _do9guard0 .r2int
	act _do9guard0:
		print a0[i0]
		print space0
		mov .r3chr i0
		add .r3chr 1
		mov i0 .r3chr
print newline0
halt
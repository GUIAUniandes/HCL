# -*- coding: utf-8 -*-

from __future__ import print_function

import vm
import os
import re
import sys
import compiler.frontend

SET = 'set'
MOV = 'mov'
INC = 'inc'
DEC = 'dec'
MUL = 'mul'
DIV = 'div'
ADD = 'add'
SUB = 'sub'
NOT = 'not'
OR = 'or'
AND = 'and'
XOR = 'xor'
MOD = 'mod'
CMP = 'cmp'
PUSH = 'push'
CALL = 'call'
FREE = 'free'
HALT = 'halt'
PRINT = 'print'

DO = 'do:'
CLC = 'clc:'
GSS = 'gss'
EQU = 'equ'
NEQ = 'neq'
GE = 'sgt'
LE = 'slt'
GEQ = 'geq'
LEQ = 'leq'

SPACE = 'space'
NEWLINE = 'nl'
SPACE_VAL = '100000'
NEWLINE_VAL = '001010'

INT = 'integer'
BOOL = 'boolean'
CHAR = 'char'

type_equivalence = {'int':INT, BOOL:BOOL, CHAR:CHAR}

initialization = {}

def code_generation(data, tree):
	stat = 0
	lines = []
	path = data['path']
	folder = os.path.dirname(path)
	file_name = os.path.basename(path)
	output_file = file_name.replace('.hcl', '.vhcl')
	if output_file == file_name:
	   output_file += '.vhcl'
	lines.append(';; %s : Autogenerated file by HCL Compiler v1.0\n' % (output_file))
	stat, lines = variable_declaration(data, tree, lines)
	if stat == 0:
	   lines.append('\n;; General program execution routine\n')
	return stat, lines

def variable_declaration(data, tree, lines):
    stat = 0
    lines.append(';; Auxiliar character defintion')
    lines.append('%s %s %s  ;; Space character' % (SET, SPACE, CHAR))
    lines.append('%s %s %s  ;; New Line character' % (SET, NEWLINE, CHAR))
    lines.append('%s %s %s  ;; Space character initialization' % (MOV, SPACE, SPACE_VAL))
    lines.append('%s %s %s  ;; New Line character initialization\n' % (MOV, NEWLINE, NEWLINE_VAL))
    lines.append(';; General variable defintion')
    
    for scope in sorted(data['definitions'].keys()):
        scope_variables = data['definitions'][scope]
        for variable in scope_variables:
            var_info = scope_variables[variable]
            #Limitation: Number of indices allowed by the VM is restricted to 2
            if len(var_info['size']) > 2:
               stat = -13
               print("File: %s - Line: %d:%d\nVirtual Machine Limitation: Dimensions of array %s must not exceed two" % (data['path'], var_info['tok'].line, var_info['tok'].col, variable), file=sys.stderr)	
               break
            instr = '%s %s%d %s' % (SET, variable, scope, type_equivalence[var_info['type']])
            if len(var_info['size']) > 1:
               instr += '#'+'#'.join(map(str, var_info['size']))
            lines.append(instr)
    return stat, lines

def program_generation(data, tree):
	stat = 0